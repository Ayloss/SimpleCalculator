options{
    JDK_VERSION = "1.8";
    STATIC = false;
}

PARSER_BEGIN(MyParser)

package javacc;
import java.util.ArrayList;
import manual.*;


public class MyParser {
    public static ArrayList<MyToken> tokens = new ArrayList<MyToken>();

    public static void main(String args[]) throws ParseException{
        MyParser parser = new MyParser(System.in);
        try {
          parser.parse();
          SemanticAnalyser semanticAnalyser = new SemanticAnalyser();
          System.out.println(semanticAnalyser.analyse(tokens));
        } catch (ParseException e) {
          System.err.println(e.getMessage());
        }
    }

}

PARSER_END(MyParser)

SKIP:
{
"\r"
| " "
| "\t"
}

TOKEN:
{
    <NUMBER: (["0"-"9"])+|(["0"-"9"])+"."(["0"-"9"])+ >
    |
    <OP_ADD: "+">
    |
    <OP_SUB: "-">
    |
    <OP_MUL: "*">
    |
    <OP_DIV: "/">
    |
    <L_BRACE: "(">
    |
    <R_BRACE: ")">
    |
    <EOL : "\n" >
}

void parse():
{
}
{
    expression() <EOL>
        {
            tokens.add(new MyToken("#",TokenType.END));
        }
}

void expression():
{
}
{
    [
    <OP_ADD>
        {
            tokens.add(new MyToken("+",TokenType.OP_ADD));
        }
    |
    <OP_SUB>
        {
            tokens.add(new MyToken("-",TokenType.OP_SUB));
        }
    ]
    term()
    (
        <OP_ADD>
            {
                tokens.add(new MyToken("+",TokenType.OP_ADD));
            }
        term()
        |
        <OP_SUB>
            {
                tokens.add(new MyToken("-",TokenType.OP_SUB));
            }
        term()
    )*

}

void term():
{}
{
    factor()
    (
        <OP_MUL>
            {
                tokens.add(new MyToken("*",TokenType.OP_MUL));
            }
        factor()
        |
         <OP_DIV>
            {
                tokens.add(new MyToken("/",TokenType.OP_DIV));
            }
        factor()
    )*
}

void factor():
{
    Token s;
}
{
    s = <NUMBER>
        {
            tokens.add(new MyToken(s.image,TokenType.NUMBER));
        }
    |
    <L_BRACE>
        {
            tokens.add(new MyToken("(",TokenType.L_BRACE));
        }
    expression()
    <R_BRACE>
        {
            tokens.add(new MyToken(")",TokenType.R_BRACE));
        }
}